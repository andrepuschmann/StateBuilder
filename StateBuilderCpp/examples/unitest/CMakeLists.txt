
project(Unitest)
cmake_minimum_required(VERSION 2.6)

#Look for the Finite State Machine Compiler
find_package(STATEBUILDERCPP REQUIRED)

add_test(InvalidStateKind  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/InvalidStateKind.fsmcpp" )
SET_TESTS_PROPERTIES(InvalidStateKind PROPERTIES WILL_FAIL TRUE)

add_test(DuplicatedTransition  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/DuplicatedTransition.fsmcpp" )
SET_TESTS_PROPERTIES(DuplicatedTransition PROPERTIES WILL_FAIL TRUE)

add_test(DuplicatedTransition01  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/DuplicatedTransition01.fsmcpp" )
SET_TESTS_PROPERTIES(DuplicatedTransition01 PROPERTIES WILL_FAIL TRUE)

add_test(DuplicatedTransition02  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/DuplicatedTransition01.fsmcpp" )
SET_TESTS_PROPERTIES(DuplicatedTransition02 PROPERTIES WILL_FAIL TRUE)

add_test(DuplicatedTransition03  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/DuplicatedTransition01.fsmcpp" )
SET_TESTS_PROPERTIES(DuplicatedTransition03 PROPERTIES WILL_FAIL TRUE)

add_test(EventDoesNotExist  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/EventDoesNotExist.fsmcpp" )
SET_TESTS_PROPERTIES(EventDoesNotExist PROPERTIES WILL_FAIL TRUE)

add_test(FinalStateIsNotLeaf  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/FinalStateIsNotLeaf.fsmcpp" )
SET_TESTS_PROPERTIES(FinalStateIsNotLeaf PROPERTIES WILL_FAIL TRUE)

add_test(GuardConditionOrder01  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/GuardConditionOrder01.fsmcpp" )
SET_TESTS_PROPERTIES(GuardConditionOrder01 PROPERTIES WILL_FAIL TRUE)

add_test(GuardConditionOrder02  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/GuardConditionOrder02.fsmcpp" )
SET_TESTS_PROPERTIES(GuardConditionOrder02 PROPERTIES WILL_FAIL TRUE)

add_test(SyncAndTimers  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/SyncAndTimers.fsmcpp" )
SET_TESTS_PROPERTIES(SyncAndTimers PROPERTIES WILL_FAIL TRUE)

add_test(NextStateDoesNotExist  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/NextStateDoesNotExist.fsmcpp" )
SET_TESTS_PROPERTIES(NextStateDoesNotExist PROPERTIES WILL_FAIL TRUE)

add_test(NextStateDoesNotExist02  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/NextStateDoesNotExist02.fsmcpp" )
SET_TESTS_PROPERTIES(NextStateDoesNotExist02 PROPERTIES WILL_FAIL TRUE)

add_test(NextStateDoesNotExist03  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/NextStateDoesNotExist03.fsmcpp" )
SET_TESTS_PROPERTIES(NextStateDoesNotExist03 PROPERTIES WILL_FAIL TRUE)

add_test(TimerStartDoNotExist  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/TimerStartDoNotExist.fsmcpp" )
SET_TESTS_PROPERTIES(TimerStartDoNotExist PROPERTIES WILL_FAIL TRUE)

add_test(TimerStartDoNotExist02  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/TimerStartDoNotExist02.fsmcpp" )
SET_TESTS_PROPERTIES(TimerStartDoNotExist02 PROPERTIES WILL_FAIL TRUE)

add_test(TimerStartDoNotExist03  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/TimerStartDoNotExist03.fsmcpp" )
SET_TESTS_PROPERTIES(TimerStartDoNotExist03 PROPERTIES WILL_FAIL TRUE)

add_test(TimerStopDoNotExist  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/TimerStopDoNotExist.fsmcpp" )
SET_TESTS_PROPERTIES(TimerStopDoNotExist PROPERTIES WILL_FAIL TRUE)

add_test(TimerStopDoNotExist02  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/TimerStopDoNotExist02.fsmcpp" )
SET_TESTS_PROPERTIES(TimerStopDoNotExist02 PROPERTIES WILL_FAIL TRUE)

add_test(TimerStopDoNotExist03  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/TimerStopDoNotExist03.fsmcpp" )
SET_TESTS_PROPERTIES(TimerStopDoNotExist03 PROPERTIES WILL_FAIL TRUE)

add_test(DuplicatedState  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/DuplicatedState.fsmcpp" )
SET_TESTS_PROPERTIES(DuplicatedState PROPERTIES WILL_FAIL TRUE)

add_test(MisorderedTransition  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "${CMAKE_CURRENT_SOURCE_DIR}/MisorderedTransition.fsmcpp" )
SET_TESTS_PROPERTIES(MisorderedTransition PROPERTIES WILL_FAIL TRUE)

add_test(InvalidOption  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/" "--invalid-option" )
SET_TESTS_PROPERTIES(InvalidOption PROPERTIES WILL_FAIL TRUE)

add_test(InvalidStateMachine  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/"  "${CMAKE_CURRENT_SOURCE_DIR}/Invalid.fsmcpp")
SET_TESTS_PROPERTIES(InvalidStateMachine PROPERTIES WILL_FAIL TRUE)

add_test(NotWellFormedStateMachine  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/"  "${CMAKE_CURRENT_SOURCE_DIR}/NotWellFormed.fsmcpp")
SET_TESTS_PROPERTIES(NotWellFormedStateMachine PROPERTIES WILL_FAIL TRUE)

add_test(NotWellFormedStateMachine02  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/"  "${CMAKE_CURRENT_SOURCE_DIR}/NotWellFormed02.fsmcpp")
SET_TESTS_PROPERTIES(NotWellFormedStateMachine02 PROPERTIES WILL_FAIL TRUE)

add_test(NotFoundStateMachine  ${STATEBUILDERCPP_EXECUTABLE} "-d" "${CMAKE_CURRENT_BINARY_DIR}/"  "${CMAKE_CURRENT_SOURCE_DIR}/NotFound.fsmcpp")
SET_TESTS_PROPERTIES(NotFoundStateMachine PROPERTIES WILL_FAIL TRUE)

add_test(PrependFileNotFound  ${STATEBUILDERCPP_EXECUTABLE} "-p" "${CMAKE_CURRENT_SOURCE_DIR}/NotFound.txt" "-d" "${CMAKE_CURRENT_BINARY_DIR}/"  "${CMAKE_CURRENT_SOURCE_DIR}/Minimal.fsmcpp")
SET_TESTS_PROPERTIES(PrependFileNotFound PROPERTIES WILL_FAIL TRUE)

add_test(PrependFile  ${STATEBUILDERCPP_EXECUTABLE} "-p" "${CMAKE_CURRENT_SOURCE_DIR}/Copyright.txt" "-d" "${CMAKE_CURRENT_BINARY_DIR}/"  "${CMAKE_CURRENT_SOURCE_DIR}/Minimal.fsmcpp")

